
atxboot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000972  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00802000  00000972  00000a06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006b  008020a8  008020a8  00000aae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ae0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003765  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000297f  00000000  00000000  0000437d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d6a  00000000  00000000  00006cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  00007a68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001a113  00000000  00000000  00007d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c7f  00000000  00000000  00021e77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00022af6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000005a8  00000000  00000000  00022bf6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	16 c1       	rjmp	.+556    	; 0x232 <__bad_interrupt>
   6:	00 00       	nop
   8:	14 c1       	rjmp	.+552    	; 0x232 <__bad_interrupt>
   a:	00 00       	nop
   c:	12 c1       	rjmp	.+548    	; 0x232 <__bad_interrupt>
   e:	00 00       	nop
  10:	10 c1       	rjmp	.+544    	; 0x232 <__bad_interrupt>
  12:	00 00       	nop
  14:	0e c1       	rjmp	.+540    	; 0x232 <__bad_interrupt>
  16:	00 00       	nop
  18:	0c c1       	rjmp	.+536    	; 0x232 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0a c1       	rjmp	.+532    	; 0x232 <__bad_interrupt>
  1e:	00 00       	nop
  20:	08 c1       	rjmp	.+528    	; 0x232 <__bad_interrupt>
  22:	00 00       	nop
  24:	06 c1       	rjmp	.+524    	; 0x232 <__bad_interrupt>
  26:	00 00       	nop
  28:	04 c1       	rjmp	.+520    	; 0x232 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	02 c1       	rjmp	.+516    	; 0x232 <__bad_interrupt>
  2e:	00 00       	nop
  30:	00 c1       	rjmp	.+512    	; 0x232 <__bad_interrupt>
  32:	00 00       	nop
  34:	fe c0       	rjmp	.+508    	; 0x232 <__bad_interrupt>
  36:	00 00       	nop
  38:	fc c0       	rjmp	.+504    	; 0x232 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fa c0       	rjmp	.+500    	; 0x232 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f8 c0       	rjmp	.+496    	; 0x232 <__bad_interrupt>
  42:	00 00       	nop
  44:	f6 c0       	rjmp	.+492    	; 0x232 <__bad_interrupt>
  46:	00 00       	nop
  48:	f4 c0       	rjmp	.+488    	; 0x232 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f2 c0       	rjmp	.+484    	; 0x232 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f0 c0       	rjmp	.+480    	; 0x232 <__bad_interrupt>
  52:	00 00       	nop
  54:	ee c0       	rjmp	.+476    	; 0x232 <__bad_interrupt>
  56:	00 00       	nop
  58:	ec c0       	rjmp	.+472    	; 0x232 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ea c0       	rjmp	.+468    	; 0x232 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e8 c0       	rjmp	.+464    	; 0x232 <__bad_interrupt>
  62:	00 00       	nop
  64:	e6 c0       	rjmp	.+460    	; 0x232 <__bad_interrupt>
  66:	00 00       	nop
  68:	e4 c0       	rjmp	.+456    	; 0x232 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e2 c0       	rjmp	.+452    	; 0x232 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e0 c0       	rjmp	.+448    	; 0x232 <__bad_interrupt>
  72:	00 00       	nop
  74:	de c0       	rjmp	.+444    	; 0x232 <__bad_interrupt>
  76:	00 00       	nop
  78:	dc c0       	rjmp	.+440    	; 0x232 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	da c0       	rjmp	.+436    	; 0x232 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d8 c0       	rjmp	.+432    	; 0x232 <__bad_interrupt>
  82:	00 00       	nop
  84:	d6 c0       	rjmp	.+428    	; 0x232 <__bad_interrupt>
  86:	00 00       	nop
  88:	d4 c0       	rjmp	.+424    	; 0x232 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d2 c0       	rjmp	.+420    	; 0x232 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d0 c0       	rjmp	.+416    	; 0x232 <__bad_interrupt>
  92:	00 00       	nop
  94:	ce c0       	rjmp	.+412    	; 0x232 <__bad_interrupt>
  96:	00 00       	nop
  98:	cc c0       	rjmp	.+408    	; 0x232 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ca c0       	rjmp	.+404    	; 0x232 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c8 c0       	rjmp	.+400    	; 0x232 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c6 c0       	rjmp	.+396    	; 0x232 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c4 c0       	rjmp	.+392    	; 0x232 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c2 c0       	rjmp	.+388    	; 0x232 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c0 c0       	rjmp	.+384    	; 0x232 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	be c0       	rjmp	.+380    	; 0x232 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	bc c0       	rjmp	.+376    	; 0x232 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	ba c0       	rjmp	.+372    	; 0x232 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b8 c0       	rjmp	.+368    	; 0x232 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b6 c0       	rjmp	.+364    	; 0x232 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b4 c0       	rjmp	.+360    	; 0x232 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b2 c0       	rjmp	.+356    	; 0x232 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b0 c0       	rjmp	.+352    	; 0x232 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	ae c0       	rjmp	.+348    	; 0x232 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	ac c0       	rjmp	.+344    	; 0x232 <__bad_interrupt>
  da:	00 00       	nop
  dc:	aa c0       	rjmp	.+340    	; 0x232 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a8 c0       	rjmp	.+336    	; 0x232 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a6 c0       	rjmp	.+332    	; 0x232 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a4 c0       	rjmp	.+328    	; 0x232 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a2 c0       	rjmp	.+324    	; 0x232 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a0 c0       	rjmp	.+320    	; 0x232 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	9e c0       	rjmp	.+316    	; 0x232 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	9c c0       	rjmp	.+312    	; 0x232 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9a c0       	rjmp	.+308    	; 0x232 <__bad_interrupt>
  fe:	00 00       	nop
 100:	98 c0       	rjmp	.+304    	; 0x232 <__bad_interrupt>
 102:	00 00       	nop
 104:	96 c0       	rjmp	.+300    	; 0x232 <__bad_interrupt>
 106:	00 00       	nop
 108:	94 c0       	rjmp	.+296    	; 0x232 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	92 c0       	rjmp	.+292    	; 0x232 <__bad_interrupt>
 10e:	00 00       	nop
 110:	90 c0       	rjmp	.+288    	; 0x232 <__bad_interrupt>
 112:	00 00       	nop
 114:	8e c0       	rjmp	.+284    	; 0x232 <__bad_interrupt>
 116:	00 00       	nop
 118:	8c c0       	rjmp	.+280    	; 0x232 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8a c0       	rjmp	.+276    	; 0x232 <__bad_interrupt>
 11e:	00 00       	nop
 120:	88 c0       	rjmp	.+272    	; 0x232 <__bad_interrupt>
 122:	00 00       	nop
 124:	86 c0       	rjmp	.+268    	; 0x232 <__bad_interrupt>
 126:	00 00       	nop
 128:	84 c0       	rjmp	.+264    	; 0x232 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	82 c0       	rjmp	.+260    	; 0x232 <__bad_interrupt>
 12e:	00 00       	nop
 130:	80 c0       	rjmp	.+256    	; 0x232 <__bad_interrupt>
 132:	00 00       	nop
 134:	7e c0       	rjmp	.+252    	; 0x232 <__bad_interrupt>
 136:	00 00       	nop
 138:	7c c0       	rjmp	.+248    	; 0x232 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7a c0       	rjmp	.+244    	; 0x232 <__bad_interrupt>
 13e:	00 00       	nop
 140:	78 c0       	rjmp	.+240    	; 0x232 <__bad_interrupt>
 142:	00 00       	nop
 144:	76 c0       	rjmp	.+236    	; 0x232 <__bad_interrupt>
 146:	00 00       	nop
 148:	74 c0       	rjmp	.+232    	; 0x232 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	72 c0       	rjmp	.+228    	; 0x232 <__bad_interrupt>
 14e:	00 00       	nop
 150:	70 c0       	rjmp	.+224    	; 0x232 <__bad_interrupt>
 152:	00 00       	nop
 154:	6e c0       	rjmp	.+220    	; 0x232 <__bad_interrupt>
 156:	00 00       	nop
 158:	6c c0       	rjmp	.+216    	; 0x232 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6a c0       	rjmp	.+212    	; 0x232 <__bad_interrupt>
 15e:	00 00       	nop
 160:	68 c0       	rjmp	.+208    	; 0x232 <__bad_interrupt>
 162:	00 00       	nop
 164:	66 c0       	rjmp	.+204    	; 0x232 <__bad_interrupt>
 166:	00 00       	nop
 168:	64 c0       	rjmp	.+200    	; 0x232 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	62 c0       	rjmp	.+196    	; 0x232 <__bad_interrupt>
 16e:	00 00       	nop
 170:	60 c0       	rjmp	.+192    	; 0x232 <__bad_interrupt>
 172:	00 00       	nop
 174:	5e c0       	rjmp	.+188    	; 0x232 <__bad_interrupt>
 176:	00 00       	nop
 178:	5c c0       	rjmp	.+184    	; 0x232 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5a c0       	rjmp	.+180    	; 0x232 <__bad_interrupt>
 17e:	00 00       	nop
 180:	58 c0       	rjmp	.+176    	; 0x232 <__bad_interrupt>
 182:	00 00       	nop
 184:	56 c0       	rjmp	.+172    	; 0x232 <__bad_interrupt>
 186:	00 00       	nop
 188:	54 c0       	rjmp	.+168    	; 0x232 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	52 c0       	rjmp	.+164    	; 0x232 <__bad_interrupt>
 18e:	00 00       	nop
 190:	50 c0       	rjmp	.+160    	; 0x232 <__bad_interrupt>
 192:	00 00       	nop
 194:	4e c0       	rjmp	.+156    	; 0x232 <__bad_interrupt>
 196:	00 00       	nop
 198:	4c c0       	rjmp	.+152    	; 0x232 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4a c0       	rjmp	.+148    	; 0x232 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	48 c0       	rjmp	.+144    	; 0x232 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	46 c0       	rjmp	.+140    	; 0x232 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	44 c0       	rjmp	.+136    	; 0x232 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	42 c0       	rjmp	.+132    	; 0x232 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	40 c0       	rjmp	.+128    	; 0x232 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	3e c0       	rjmp	.+124    	; 0x232 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	3c c0       	rjmp	.+120    	; 0x232 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3a c0       	rjmp	.+116    	; 0x232 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	38 c0       	rjmp	.+112    	; 0x232 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	36 c0       	rjmp	.+108    	; 0x232 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	34 c0       	rjmp	.+104    	; 0x232 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	32 c0       	rjmp	.+100    	; 0x232 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	30 c0       	rjmp	.+96     	; 0x232 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	2e c0       	rjmp	.+92     	; 0x232 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	2c c0       	rjmp	.+88     	; 0x232 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2a c0       	rjmp	.+84     	; 0x232 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	28 c0       	rjmp	.+80     	; 0x232 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	26 c0       	rjmp	.+76     	; 0x232 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	24 c0       	rjmp	.+72     	; 0x232 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	22 c0       	rjmp	.+68     	; 0x232 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	20 c0       	rjmp	.+64     	; 0x232 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	1e c0       	rjmp	.+60     	; 0x232 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	1c c0       	rjmp	.+56     	; 0x232 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
 208:	10 e2       	ldi	r17, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	e2 e7       	ldi	r30, 0x72	; 114
 210:	f9 e0       	ldi	r31, 0x09	; 9
 212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
 214:	05 90       	lpm	r0, Z+
 216:	0d 92       	st	X+, r0
 218:	a8 3a       	cpi	r26, 0xA8	; 168
 21a:	b1 07       	cpc	r27, r17
 21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
 21e:	21 e2       	ldi	r18, 0x21	; 33
 220:	a8 ea       	ldi	r26, 0xA8	; 168
 222:	b0 e2       	ldi	r27, 0x20	; 32
 224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
 226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
 228:	a3 31       	cpi	r26, 0x13	; 19
 22a:	b2 07       	cpc	r27, r18
 22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
 22e:	45 d2       	rcall	.+1162   	; 0x6ba <main>
 230:	9e c3       	rjmp	.+1852   	; 0x96e <_exit>

00000232 <__bad_interrupt>:
 232:	e6 ce       	rjmp	.-564    	; 0x0 <__vectors>

00000234 <UsartInit>:
state GetRadioRtsPinState(){
	if(PIN5_bm == PORTD.IN & PIN5_bm)
		return HIGH;
	else
		return LOW;
}
 234:	88 e0       	ldi	r24, 0x08	; 8
 236:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
 23a:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
 23e:	84 e0       	ldi	r24, 0x04	; 4
 240:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <__TEXT_REGION_LENGTH__+0x700682>
 244:	83 e0       	ldi	r24, 0x03	; 3
 246:	80 93 a5 0a 	sts	0x0AA5, r24	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x700aa5>
 24a:	80 e2       	ldi	r24, 0x20	; 32
 24c:	80 93 a3 0a 	sts	0x0AA3, r24	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
 250:	80 e4       	ldi	r24, 0x40	; 64
 252:	80 93 a6 0a 	sts	0x0AA6, r24	; 0x800aa6 <__TEXT_REGION_LENGTH__+0x700aa6>
 256:	80 ea       	ldi	r24, 0xA0	; 160
 258:	80 93 a7 0a 	sts	0x0AA7, r24	; 0x800aa7 <__TEXT_REGION_LENGTH__+0x700aa7>
 25c:	88 e1       	ldi	r24, 0x18	; 24
 25e:	80 93 a4 0a 	sts	0x0AA4, r24	; 0x800aa4 <__TEXT_REGION_LENGTH__+0x700aa4>
 262:	e2 ea       	ldi	r30, 0xA2	; 162
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	82 60       	ori	r24, 0x02	; 2
 26a:	80 83       	st	Z, r24
 26c:	08 95       	ret

0000026e <SendChar>:
 26e:	e0 ea       	ldi	r30, 0xA0	; 160
 270:	fa e0       	ldi	r31, 0x0A	; 10
 272:	91 81       	ldd	r25, Z+1	; 0x01
 274:	95 ff       	sbrs	r25, 5
 276:	fd cf       	rjmp	.-6      	; 0x272 <SendChar+0x4>
 278:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
 27c:	08 95       	ret

0000027e <Send>:
 27e:	0f 93       	push	r16
 280:	1f 93       	push	r17
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	16 16       	cp	r1, r22
 288:	17 06       	cpc	r1, r23
 28a:	4c f4       	brge	.+18     	; 0x29e <Send+0x20>
 28c:	8c 01       	movw	r16, r24
 28e:	ec 01       	movw	r28, r24
 290:	06 0f       	add	r16, r22
 292:	17 1f       	adc	r17, r23
 294:	89 91       	ld	r24, Y+
 296:	eb df       	rcall	.-42     	; 0x26e <SendChar>
 298:	c0 17       	cp	r28, r16
 29a:	d1 07       	cpc	r29, r17
 29c:	d9 f7       	brne	.-10     	; 0x294 <Send+0x16>
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	08 95       	ret

000002a8 <SendFrame>:
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	8c 01       	movw	r16, r24
 2b2:	8a e3       	ldi	r24, 0x3A	; 58
 2b4:	dc df       	rcall	.-72     	; 0x26e <SendChar>
 2b6:	f8 01       	movw	r30, r16
 2b8:	80 81       	ld	r24, Z
 2ba:	8b 32       	cpi	r24, 0x2B	; 43
 2bc:	79 f0       	breq	.+30     	; 0x2dc <SendFrame+0x34>
 2be:	88 23       	and	r24, r24
 2c0:	69 f0       	breq	.+26     	; 0x2dc <SendFrame+0x34>
 2c2:	e8 01       	movw	r28, r16
 2c4:	21 96       	adiw	r28, 0x01	; 1
 2c6:	0b 59       	subi	r16, 0x9B	; 155
 2c8:	1f 4f       	sbci	r17, 0xFF	; 255
 2ca:	d1 df       	rcall	.-94     	; 0x26e <SendChar>
 2cc:	89 91       	ld	r24, Y+
 2ce:	8b 32       	cpi	r24, 0x2B	; 43
 2d0:	29 f0       	breq	.+10     	; 0x2dc <SendFrame+0x34>
 2d2:	88 23       	and	r24, r24
 2d4:	19 f0       	breq	.+6      	; 0x2dc <SendFrame+0x34>
 2d6:	c0 17       	cp	r28, r16
 2d8:	d1 07       	cpc	r29, r17
 2da:	b9 f7       	brne	.-18     	; 0x2ca <SendFrame+0x22>
 2dc:	8b e2       	ldi	r24, 0x2B	; 43
 2de:	c7 df       	rcall	.-114    	; 0x26e <SendChar>
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	08 95       	ret

000002ea <SendString>:
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	fc 01       	movw	r30, r24
 2f4:	80 81       	ld	r24, Z
 2f6:	88 23       	and	r24, r24
 2f8:	61 f0       	breq	.+24     	; 0x312 <SendString+0x28>
 2fa:	8f 01       	movw	r16, r30
 2fc:	ef 01       	movw	r28, r30
 2fe:	21 96       	adiw	r28, 0x01	; 1
 300:	03 57       	subi	r16, 0x73	; 115
 302:	1f 4f       	sbci	r17, 0xFF	; 255
 304:	b4 df       	rcall	.-152    	; 0x26e <SendChar>
 306:	89 91       	ld	r24, Y+
 308:	88 23       	and	r24, r24
 30a:	19 f0       	breq	.+6      	; 0x312 <SendString+0x28>
 30c:	c0 17       	cp	r28, r16
 30e:	d1 07       	cpc	r29, r17
 310:	c9 f7       	brne	.-14     	; 0x304 <SendString+0x1a>
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	1f 91       	pop	r17
 318:	0f 91       	pop	r16
 31a:	08 95       	ret

0000031c <BufferClear>:
 31c:	16 16       	cp	r1, r22
 31e:	4c f4       	brge	.+18     	; 0x332 <BufferClear+0x16>
 320:	fc 01       	movw	r30, r24
 322:	86 0f       	add	r24, r22
 324:	91 1d       	adc	r25, r1
 326:	67 fd       	sbrc	r22, 7
 328:	9a 95       	dec	r25
 32a:	11 92       	st	Z+, r1
 32c:	e8 17       	cp	r30, r24
 32e:	f9 07       	cpc	r31, r25
 330:	e1 f7       	brne	.-8      	; 0x32a <BufferClear+0xe>
 332:	08 95       	ret

00000334 <radioInit>:
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	c1 e6       	ldi	r28, 0x61	; 97
 33a:	d6 e0       	ldi	r29, 0x06	; 6
 33c:	88 e0       	ldi	r24, 0x08	; 8
 33e:	88 83       	st	Y, r24
 340:	a5 e6       	ldi	r26, 0x65	; 101
 342:	b6 e0       	ldi	r27, 0x06	; 6
 344:	8c 93       	st	X, r24
 346:	82 e6       	ldi	r24, 0x62	; 98
 348:	96 e0       	ldi	r25, 0x06	; 6
 34a:	24 e0       	ldi	r18, 0x04	; 4
 34c:	fc 01       	movw	r30, r24
 34e:	20 83       	st	Z, r18
 350:	e0 ea       	ldi	r30, 0xA0	; 160
 352:	f9 e0       	ldi	r31, 0x09	; 9
 354:	23 e0       	ldi	r18, 0x03	; 3
 356:	25 83       	std	Z+5, r18	; 0x05
 358:	30 e2       	ldi	r19, 0x20	; 32
 35a:	33 83       	std	Z+3, r19	; 0x03
 35c:	27 e1       	ldi	r18, 0x17	; 23
 35e:	26 83       	std	Z+6, r18	; 0x06
 360:	17 82       	std	Z+7, r1	; 0x07
 362:	28 e1       	ldi	r18, 0x18	; 24
 364:	24 83       	std	Z+4, r18	; 0x04
 366:	e2 ea       	ldi	r30, 0xA2	; 162
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	20 81       	ld	r18, Z
 36c:	22 60       	ori	r18, 0x02	; 2
 36e:	20 83       	st	Z, r18
 370:	fc 01       	movw	r30, r24
 372:	30 83       	st	Z, r19
 374:	20 e1       	ldi	r18, 0x10	; 16
 376:	20 83       	st	Z, r18
 378:	80 e4       	ldi	r24, 0x40	; 64
 37a:	88 83       	st	Y, r24
 37c:	8c 93       	st	X, r24
 37e:	80 e8       	ldi	r24, 0x80	; 128
 380:	88 83       	st	Y, r24
 382:	8c 93       	st	X, r24
 384:	8c e8       	ldi	r24, 0x8C	; 140
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	d1 d1       	rcall	.+930    	; 0x72c <malloc>
 38a:	80 93 0d 21 	sts	0x210D, r24	; 0x80210d <radioFrameReceiveBuffer>
 38e:	90 93 0e 21 	sts	0x210E, r25	; 0x80210e <radioFrameReceiveBuffer+0x1>
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <SendCharToRadio>:
void SendCharToRadio(char charToSend){
	while(!(USART_RADIO.STATUS & USART_DREIF_bm));
 398:	e0 ea       	ldi	r30, 0xA0	; 160
 39a:	f9 e0       	ldi	r31, 0x09	; 9
 39c:	91 81       	ldd	r25, Z+1	; 0x01
 39e:	95 ff       	sbrs	r25, 5
 3a0:	fd cf       	rjmp	.-6      	; 0x39c <SendCharToRadio+0x4>
	USART_RADIO.DATA = charToSend;
 3a2:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 3a6:	08 95       	ret

000003a8 <SendBufferToRadio>:
}
void SendBufferToRadio(char *buffer, int length){
 3a8:	0f 93       	push	r16
 3aa:	1f 93       	push	r17
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
	for(int charCounter = 0; charCounter < length; charCounter++){
 3b0:	16 16       	cp	r1, r22
 3b2:	17 06       	cpc	r1, r23
 3b4:	4c f4       	brge	.+18     	; 0x3c8 <SendBufferToRadio+0x20>
 3b6:	8c 01       	movw	r16, r24
 3b8:	ec 01       	movw	r28, r24
 3ba:	06 0f       	add	r16, r22
 3bc:	17 1f       	adc	r17, r23
		SendCharToRadio(buffer[charCounter]);
 3be:	89 91       	ld	r24, Y+
 3c0:	eb df       	rcall	.-42     	; 0x398 <SendCharToRadio>
void SendCharToRadio(char charToSend){
	while(!(USART_RADIO.STATUS & USART_DREIF_bm));
	USART_RADIO.DATA = charToSend;
}
void SendBufferToRadio(char *buffer, int length){
	for(int charCounter = 0; charCounter < length; charCounter++){
 3c2:	c0 17       	cp	r28, r16
 3c4:	d1 07       	cpc	r29, r17
 3c6:	d9 f7       	brne	.-10     	; 0x3be <SendBufferToRadio+0x16>
		SendCharToRadio(buffer[charCounter]);
	}
}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	08 95       	ret

000003d2 <SendCommandToRadio>:
void SendCommandToRadio(char command,char length, char *data){
 3d2:	0f 93       	push	r16
 3d4:	1f 93       	push	r17
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
 3de:	cc 58       	subi	r28, 0x8C	; 140
 3e0:	d1 09       	sbc	r29, r1
 3e2:	cd bf       	out	0x3d, r28	; 61
 3e4:	de bf       	out	0x3e, r29	; 62
	char buffer[RADIO_FRAME_SIZE_MAX];
	char checksum;
	buffer[0] = 0x02;
 3e6:	92 e0       	ldi	r25, 0x02	; 2
 3e8:	99 83       	std	Y+1, r25	; 0x01
	buffer[1] = command;
 3ea:	8a 83       	std	Y+2, r24	; 0x02
	buffer[2] = length;
 3ec:	6b 83       	std	Y+3, r22	; 0x03
	checksum = buffer[0] ^ buffer[1] ^ buffer[2];
 3ee:	96 27       	eor	r25, r22
 3f0:	89 27       	eor	r24, r25
	for(int i = 0; i<length; i++){
 3f2:	06 2f       	mov	r16, r22
 3f4:	06 2e       	mov	r0, r22
 3f6:	00 0c       	add	r0, r0
 3f8:	11 0b       	sbc	r17, r17
 3fa:	10 16       	cp	r1, r16
 3fc:	11 06       	cpc	r1, r17
 3fe:	8c f4       	brge	.+34     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 400:	a4 2f       	mov	r26, r20
 402:	b5 2f       	mov	r27, r21
 404:	fe 01       	movw	r30, r28
 406:	34 96       	adiw	r30, 0x04	; 4
 408:	9e 01       	movw	r18, r28
 40a:	26 0f       	add	r18, r22
 40c:	31 1d       	adc	r19, r1
 40e:	67 fd       	sbrc	r22, 7
 410:	3a 95       	dec	r19
 412:	2c 5f       	subi	r18, 0xFC	; 252
 414:	3f 4f       	sbci	r19, 0xFF	; 255
		buffer[i+3] = data[i];
 416:	9d 91       	ld	r25, X+
 418:	91 93       	st	Z+, r25
		checksum ^= buffer[i+3];
 41a:	89 27       	eor	r24, r25
	char checksum;
	buffer[0] = 0x02;
	buffer[1] = command;
	buffer[2] = length;
	checksum = buffer[0] ^ buffer[1] ^ buffer[2];
	for(int i = 0; i<length; i++){
 41c:	e2 17       	cp	r30, r18
 41e:	f3 07       	cpc	r31, r19
 420:	d1 f7       	brne	.-12     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		buffer[i+3] = data[i];
		checksum ^= buffer[i+3];
	}
	buffer[length+3] = checksum;
 422:	fe 01       	movw	r30, r28
 424:	e0 0f       	add	r30, r16
 426:	f1 1f       	adc	r31, r17
 428:	84 83       	std	Z+4, r24	; 0x04
	//SetRadioConfigPinLow();
	//SetRadioConfigPinHigh();
	SendBufferToRadio(buffer,length+4);
 42a:	b8 01       	movw	r22, r16
 42c:	6c 5f       	subi	r22, 0xFC	; 252
 42e:	7f 4f       	sbci	r23, 0xFF	; 255
 430:	ce 01       	movw	r24, r28
 432:	01 96       	adiw	r24, 0x01	; 1
 434:	b9 df       	rcall	.-142    	; 0x3a8 <SendBufferToRadio>
	//SetRadioConfigPinHigh();
}
 436:	c4 57       	subi	r28, 0x74	; 116
 438:	df 4f       	sbci	r29, 0xFF	; 255
 43a:	cd bf       	out	0x3d, r28	; 61
 43c:	de bf       	out	0x3e, r29	; 62
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	1f 91       	pop	r17
 444:	0f 91       	pop	r16
 446:	08 95       	ret

00000448 <ReceiveCharFromRadio>:
char ReceiveCharFromRadio(){
	int timeoutCounter = 0;
	radioTimeoutFlag = 0;
 448:	10 92 a8 20 	sts	0x20A8, r1	; 0x8020a8 <__data_end>
	while(!(USART_RADIO.STATUS & USART_RXCIF_bm)){
 44c:	81 e3       	ldi	r24, 0x31	; 49
 44e:	95 e7       	ldi	r25, 0x75	; 117
 450:	e0 ea       	ldi	r30, 0xA0	; 160
 452:	f9 e0       	ldi	r31, 0x09	; 9
 454:	07 c0       	rjmp	.+14     	; 0x464 <ReceiveCharFromRadio+0x1c>
 456:	01 97       	sbiw	r24, 0x01	; 1
		if(RADIO_TIMEOUT <= timeoutCounter++){
 458:	29 f4       	brne	.+10     	; 0x464 <ReceiveCharFromRadio+0x1c>
			radioTimeoutFlag = 1;
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	80 93 a8 20 	sts	0x20A8, r24	; 0x8020a8 <__data_end>
			return 0;
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	08 95       	ret
	//SetRadioConfigPinHigh();
}
char ReceiveCharFromRadio(){
	int timeoutCounter = 0;
	radioTimeoutFlag = 0;
	while(!(USART_RADIO.STATUS & USART_RXCIF_bm)){
 464:	21 81       	ldd	r18, Z+1	; 0x01
 466:	22 23       	and	r18, r18
 468:	b4 f7       	brge	.-20     	; 0x456 <ReceiveCharFromRadio+0xe>
		if(RADIO_TIMEOUT <= timeoutCounter++){
			radioTimeoutFlag = 1;
			return 0;
		}
	}
	return USART_RADIO.DATA;
 46a:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}
 46e:	08 95       	ret

00000470 <ReceiveFrameFromRadio>:
void ReceiveFrameFromRadio(char *buffer){
 470:	cf 92       	push	r12
 472:	df 92       	push	r13
 474:	ef 92       	push	r14
 476:	ff 92       	push	r15
 478:	0f 93       	push	r16
 47a:	1f 93       	push	r17
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	ec 01       	movw	r28, r24
	BufferClear(buffer,140);
 482:	6c e8       	ldi	r22, 0x8C	; 140
	char receivedChar = ReceiveCharFromRadio();
 484:	4b df       	rcall	.-362    	; 0x31c <BufferClear>
 486:	e0 df       	rcall	.-64     	; 0x448 <ReceiveCharFromRadio>
	if(radioTimeoutFlag){
 488:	90 91 a8 20 	lds	r25, 0x20A8	; 0x8020a8 <__data_end>
 48c:	99 23       	and	r25, r25
		SendString("TimeoutStartChar\n");
 48e:	21 f0       	breq	.+8      	; 0x498 <ReceiveFrameFromRadio+0x28>
 490:	8c e1       	ldi	r24, 0x1C	; 28
 492:	90 e2       	ldi	r25, 0x20	; 32
		return;
 494:	2a df       	rcall	.-428    	; 0x2ea <SendString>
	}
	buffer[0]=receivedChar;
 496:	4e c0       	rjmp	.+156    	; 0x534 <ReceiveFrameFromRadio+0xc4>
	if(RADIO_FRAME_START == receivedChar){
 498:	88 83       	st	Y, r24
		SendFrame("0x02");
 49a:	82 30       	cpi	r24, 0x02	; 2
 49c:	09 f0       	breq	.+2      	; 0x4a0 <ReceiveFrameFromRadio+0x30>
 49e:	4a c0       	rjmp	.+148    	; 0x534 <ReceiveFrameFromRadio+0xc4>
		char command = ReceiveCharFromRadio();
 4a0:	8e e2       	ldi	r24, 0x2E	; 46
 4a2:	90 e2       	ldi	r25, 0x20	; 32
		if(radioTimeoutFlag){
 4a4:	01 df       	rcall	.-510    	; 0x2a8 <SendFrame>
 4a6:	d0 df       	rcall	.-96     	; 0x448 <ReceiveCharFromRadio>
			SendString("TimeoutC\n");
 4a8:	90 91 a8 20 	lds	r25, 0x20A8	; 0x8020a8 <__data_end>
 4ac:	99 23       	and	r25, r25
			return;
 4ae:	21 f0       	breq	.+8      	; 0x4b8 <ReceiveFrameFromRadio+0x48>
		}
		buffer[1] = command;
 4b0:	83 e3       	ldi	r24, 0x33	; 51
		char length = ReceiveCharFromRadio();
 4b2:	90 e2       	ldi	r25, 0x20	; 32
		if(radioTimeoutFlag){
 4b4:	1a df       	rcall	.-460    	; 0x2ea <SendString>
 4b6:	3e c0       	rjmp	.+124    	; 0x534 <ReceiveFrameFromRadio+0xc4>
 4b8:	89 83       	std	Y+1, r24	; 0x01
 4ba:	c6 df       	rcall	.-116    	; 0x448 <ReceiveCharFromRadio>
			SendString("TimeoutL\n");
 4bc:	90 91 a8 20 	lds	r25, 0x20A8	; 0x8020a8 <__data_end>
 4c0:	99 23       	and	r25, r25
 4c2:	21 f0       	breq	.+8      	; 0x4cc <ReceiveFrameFromRadio+0x5c>
			return;
 4c4:	8d e3       	ldi	r24, 0x3D	; 61
		}
		buffer[2] = length;
 4c6:	90 e2       	ldi	r25, 0x20	; 32
		char radioFrameBufferIterator = 3;
		for(int i=0; i<length; i++){
 4c8:	10 df       	rcall	.-480    	; 0x2ea <SendString>
 4ca:	34 c0       	rjmp	.+104    	; 0x534 <ReceiveFrameFromRadio+0xc4>
 4cc:	8a 83       	std	Y+2, r24	; 0x02
 4ce:	c8 2e       	mov	r12, r24
 4d0:	88 0f       	add	r24, r24
 4d2:	dd 08       	sbc	r13, r13
 4d4:	1c 14       	cp	r1, r12
 4d6:	1d 04       	cpc	r1, r13
			receivedChar = ReceiveCharFromRadio();
 4d8:	f4 f4       	brge	.+60     	; 0x516 <ReceiveFrameFromRadio+0xa6>
 4da:	e1 2c       	mov	r14, r1
			if(radioTimeoutFlag){
 4dc:	f1 2c       	mov	r15, r1
 4de:	13 e0       	ldi	r17, 0x03	; 3
 4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <ReceiveFrameFromRadio+0x74>
 4e2:	10 2f       	mov	r17, r16
				SendString("TimeoutD\n");
 4e4:	b1 df       	rcall	.-158    	; 0x448 <ReceiveCharFromRadio>
 4e6:	90 91 a8 20 	lds	r25, 0x20A8	; 0x8020a8 <__data_end>
 4ea:	99 23       	and	r25, r25
				break;
 4ec:	29 f0       	breq	.+10     	; 0x4f8 <ReceiveFrameFromRadio+0x88>
 4ee:	87 e4       	ldi	r24, 0x47	; 71
 4f0:	90 e2       	ldi	r25, 0x20	; 32
 4f2:	fb de       	rcall	.-522    	; 0x2ea <SendString>
			}
				
			buffer[radioFrameBufferIterator++] = receivedChar;
 4f4:	01 2f       	mov	r16, r17
 4f6:	10 c0       	rjmp	.+32     	; 0x518 <ReceiveFrameFromRadio+0xa8>
 4f8:	01 e0       	ldi	r16, 0x01	; 1
 4fa:	01 0f       	add	r16, r17
 4fc:	fe 01       	movw	r30, r28
			SendString("TimeoutL\n");
			return;
		}
		buffer[2] = length;
		char radioFrameBufferIterator = 3;
		for(int i=0; i<length; i++){
 4fe:	e1 0f       	add	r30, r17
 500:	f1 1d       	adc	r31, r1
 502:	17 fd       	sbrc	r17, 7
 504:	fa 95       	dec	r31
 506:	80 83       	st	Z, r24
 508:	8f ef       	ldi	r24, 0xFF	; 255
		if(radioTimeoutFlag){
			SendString("TimeoutL\n");
			return;
		}
		buffer[2] = length;
		char radioFrameBufferIterator = 3;
 50a:	e8 1a       	sub	r14, r24
			buffer[radioFrameBufferIterator++] = receivedChar;
			if(radioFrameBufferIterator > RADIO_FRAME_SIZE_MAX){
				break;
			}
		}
		char checksum = ReceiveCharFromRadio();
 50c:	f8 0a       	sbc	r15, r24
 50e:	ec 14       	cp	r14, r12
		if(radioTimeoutFlag){
 510:	fd 04       	cpc	r15, r13
 512:	39 f7       	brne	.-50     	; 0x4e2 <ReceiveFrameFromRadio+0x72>
 514:	01 c0       	rjmp	.+2      	; 0x518 <ReceiveFrameFromRadio+0xa8>
 516:	03 e0       	ldi	r16, 0x03	; 3
			SendString("TimeoutCRC\n");
 518:	97 df       	rcall	.-210    	; 0x448 <ReceiveCharFromRadio>
 51a:	90 91 a8 20 	lds	r25, 0x20A8	; 0x8020a8 <__data_end>
 51e:	99 23       	and	r25, r25
			return;
 520:	21 f0       	breq	.+8      	; 0x52a <ReceiveFrameFromRadio+0xba>
		}
		buffer[radioFrameBufferIterator] = checksum;
 522:	81 e5       	ldi	r24, 0x51	; 81
 524:	90 e2       	ldi	r25, 0x20	; 32
 526:	e1 de       	rcall	.-574    	; 0x2ea <SendString>
 528:	05 c0       	rjmp	.+10     	; 0x534 <ReceiveFrameFromRadio+0xc4>
 52a:	c0 0f       	add	r28, r16
	}
}
 52c:	d1 1d       	adc	r29, r1
 52e:	07 fd       	sbrc	r16, 7
 530:	da 95       	dec	r29
 532:	88 83       	st	Y, r24
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	1f 91       	pop	r17
 53a:	0f 91       	pop	r16
 53c:	ff 90       	pop	r15
 53e:	ef 90       	pop	r14
 540:	df 90       	pop	r13
 542:	cf 90       	pop	r12
 544:	08 95       	ret

00000546 <hexToChar>:
char hexToChar(char hex){
	if(hex<10)
 546:	8a 30       	cpi	r24, 0x0A	; 10
 548:	14 f4       	brge	.+4      	; 0x54e <hexToChar+0x8>
	return hex+'0';
 54a:	80 5d       	subi	r24, 0xD0	; 208
 54c:	08 95       	ret
	else{
		return (hex-10+'A');
 54e:	89 5c       	subi	r24, 0xC9	; 201
	}
}
 550:	08 95       	ret

00000552 <BufferToHexAscii>:
char *BufferToHexAscii(char *buffer, char bufferSize){
 552:	8f 92       	push	r8
 554:	9f 92       	push	r9
 556:	af 92       	push	r10
 558:	bf 92       	push	r11
 55a:	cf 92       	push	r12
 55c:	df 92       	push	r13
 55e:	ef 92       	push	r14
 560:	ff 92       	push	r15
 562:	0f 93       	push	r16
 564:	1f 93       	push	r17
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	6c 01       	movw	r12, r24
 56c:	a6 2e       	mov	r10, r22
	char *hexBuffer = (char*)malloc(bufferSize*3+1);
 56e:	c6 2f       	mov	r28, r22
 570:	66 0f       	add	r22, r22
 572:	dd 0b       	sbc	r29, r29
 574:	ce 01       	movw	r24, r28
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	8c 0f       	add	r24, r28
 57c:	9d 1f       	adc	r25, r29
 57e:	01 96       	adiw	r24, 0x01	; 1
 580:	d5 d0       	rcall	.+426    	; 0x72c <malloc>
 582:	4c 01       	movw	r8, r24
	int j = 0;
	for(int i=0; i<bufferSize; i++){
 584:	1c 16       	cp	r1, r28
 586:	1d 06       	cpc	r1, r29
 588:	24 f5       	brge	.+72     	; 0x5d2 <BufferToHexAscii+0x80>
 58a:	ec 01       	movw	r28, r24
 58c:	86 01       	movw	r16, r12
 58e:	0a 2c       	mov	r0, r10
 590:	00 0c       	add	r0, r0
 592:	bb 08       	sbc	r11, r11
 594:	ca 0c       	add	r12, r10
 596:	db 1c       	adc	r13, r11
		hexBuffer[j++] = '|';
 598:	0f 2e       	mov	r0, r31
 59a:	fc e7       	ldi	r31, 0x7C	; 124
 59c:	ef 2e       	mov	r14, r31
 59e:	f0 2d       	mov	r31, r0
 5a0:	e8 82       	st	Y, r14
		hexBuffer[j++] = hexToChar(buffer[i]>>4);
 5a2:	f8 01       	movw	r30, r16
 5a4:	f1 90       	ld	r15, Z+
 5a6:	8f 01       	movw	r16, r30
 5a8:	8f 2d       	mov	r24, r15
 5aa:	85 95       	asr	r24
 5ac:	85 95       	asr	r24
 5ae:	85 95       	asr	r24
 5b0:	85 95       	asr	r24
 5b2:	c9 df       	rcall	.-110    	; 0x546 <hexToChar>
		hexBuffer[j++] = hexToChar(buffer[i] & 0x0f);
 5b4:	89 83       	std	Y+1, r24	; 0x01
 5b6:	8f 2d       	mov	r24, r15
 5b8:	8f 70       	andi	r24, 0x0F	; 15
 5ba:	c5 df       	rcall	.-118    	; 0x546 <hexToChar>
 5bc:	8a 83       	std	Y+2, r24	; 0x02
	}
}
char *BufferToHexAscii(char *buffer, char bufferSize){
	char *hexBuffer = (char*)malloc(bufferSize*3+1);
	int j = 0;
	for(int i=0; i<bufferSize; i++){
 5be:	23 96       	adiw	r28, 0x03	; 3
 5c0:	0c 15       	cp	r16, r12
 5c2:	1d 05       	cpc	r17, r13
 5c4:	69 f7       	brne	.-38     	; 0x5a0 <BufferToHexAscii+0x4e>
 5c6:	f5 01       	movw	r30, r10
 5c8:	ee 0f       	add	r30, r30
 5ca:	ff 1f       	adc	r31, r31
 5cc:	ae 0e       	add	r10, r30
 5ce:	bf 1e       	adc	r11, r31
		return (hex-10+'A');
	}
}
char *BufferToHexAscii(char *buffer, char bufferSize){
	char *hexBuffer = (char*)malloc(bufferSize*3+1);
	int j = 0;
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <BufferToHexAscii+0x84>
 5d2:	a1 2c       	mov	r10, r1
	for(int i=0; i<bufferSize; i++){
		hexBuffer[j++] = '|';
		hexBuffer[j++] = hexToChar(buffer[i]>>4);
		hexBuffer[j++] = hexToChar(buffer[i] & 0x0f);
	}
	hexBuffer[j] = '\0';
 5d4:	b1 2c       	mov	r11, r1
 5d6:	f4 01       	movw	r30, r8
 5d8:	ea 0d       	add	r30, r10
 5da:	fb 1d       	adc	r31, r11
	return hexBuffer;
}
 5dc:	10 82       	st	Z, r1
 5de:	c4 01       	movw	r24, r8
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	1f 91       	pop	r17
 5e6:	0f 91       	pop	r16
 5e8:	ff 90       	pop	r15
 5ea:	ef 90       	pop	r14
 5ec:	df 90       	pop	r13
 5ee:	cf 90       	pop	r12
 5f0:	bf 90       	pop	r11
 5f2:	af 90       	pop	r10
 5f4:	9f 90       	pop	r9
 5f6:	8f 90       	pop	r8
 5f8:	08 95       	ret

000005fa <SendRadioFrameToPc>:
void SendRadioFrameToPc(){
	SendString(BufferToHexAscii(radioFrameReceiveBuffer, radioFrameReceiveBuffer[2]+4));
 5fa:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <radioFrameReceiveBuffer>
 5fe:	90 91 0e 21 	lds	r25, 0x210E	; 0x80210e <radioFrameReceiveBuffer+0x1>
 602:	fc 01       	movw	r30, r24
 604:	62 81       	ldd	r22, Z+2	; 0x02
 606:	6c 5f       	subi	r22, 0xFC	; 252
 608:	a4 df       	rcall	.-184    	; 0x552 <BufferToHexAscii>
 60a:	6f ce       	rjmp	.-802    	; 0x2ea <SendString>
 60c:	08 95       	ret

0000060e <XtalInit>:
#include "radio.c"



void XtalInit(){
	CCP = CCP_IOREG_gc;
 60e:	88 ed       	ldi	r24, 0xD8	; 216
 610:	84 bf       	out	0x34, r24	; 52
	
	OSC_XOSCCTRL = OSC_FRQRANGE_2TO9_gc | OSC_XOSCSEL0_bm | OSC_XOSCSEL1_bm; // OSC_XOSCPWR_bm
 612:	93 e4       	ldi	r25, 0x43	; 67
 614:	90 93 52 00 	sts	0x0052, r25	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>

	CCP = CCP_IOREG_gc;
 618:	84 bf       	out	0x34, r24	; 52
	OSC_CTRL = OSC_XOSCEN_bm;
 61a:	88 e0       	ldi	r24, 0x08	; 8
 61c:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	
	while(OSC_XOSCRDY_bm != (OSC_STATUS & OSC_XOSCRDY_bm));
 620:	e1 e5       	ldi	r30, 0x51	; 81
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	80 81       	ld	r24, Z
 626:	83 ff       	sbrs	r24, 3
 628:	fd cf       	rjmp	.-6      	; 0x624 <XtalInit+0x16>
	
	CLK_LOCK = 0;
 62a:	e2 e4       	ldi	r30, 0x42	; 66
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	10 82       	st	Z, r1
	CCP = CCP_IOREG_gc;
 630:	88 ed       	ldi	r24, 0xD8	; 216
 632:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_XOSC_gc;
 634:	83 e0       	ldi	r24, 0x03	; 3
 636:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	
	OSC_CTRL = OSC_XOSCEN_bm;
 63a:	88 e0       	ldi	r24, 0x08	; 8
 63c:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	CLK_LOCK = 1;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	80 83       	st	Z, r24
 644:	08 95       	ret

00000646 <delay>:
}
void delay(int ms){
	while(ms--)
 646:	00 97       	sbiw	r24, 0x00	; 0
 648:	39 f0       	breq	.+14     	; 0x658 <delay+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 64a:	e9 e9       	ldi	r30, 0x99	; 153
 64c:	f3 e0       	ldi	r31, 0x03	; 3
 64e:	31 97       	sbiw	r30, 0x01	; 1
 650:	f1 f7       	brne	.-4      	; 0x64e <delay+0x8>
 652:	00 c0       	rjmp	.+0      	; 0x654 <delay+0xe>
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	c9 f7       	brne	.-14     	; 0x64a <delay+0x4>
 658:	08 95       	ret

0000065a <ledInit>:
	_delay_ms(1);
}
void ledInit(){
	PORTA_DIRSET = PIN2_bm;
 65a:	84 e0       	ldi	r24, 0x04	; 4
 65c:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	PORTA.OUTCLR = PIN2_bm;
 660:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 664:	08 95       	ret

00000666 <ledShortTick>:
}
void ledShortTick(){
 666:	1f 93       	push	r17
 668:	cf 93       	push	r28
 66a:	df 93       	push	r29
	delay(50);
 66c:	82 e3       	ldi	r24, 0x32	; 50
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	ea df       	rcall	.-44     	; 0x646 <delay>
	PORTA.OUTSET = PIN2_bm;
 672:	c0 e0       	ldi	r28, 0x00	; 0
 674:	d6 e0       	ldi	r29, 0x06	; 6
 676:	14 e0       	ldi	r17, 0x04	; 4
 678:	1d 83       	std	Y+5, r17	; 0x05
	delay(100);
 67a:	84 e6       	ldi	r24, 0x64	; 100
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	e3 df       	rcall	.-58     	; 0x646 <delay>
	PORTA.OUTCLR = PIN2_bm;
	delay(50);
 680:	1e 83       	std	Y+6, r17	; 0x06
 682:	82 e3       	ldi	r24, 0x32	; 50
 684:	90 e0       	ldi	r25, 0x00	; 0
}
 686:	df df       	rcall	.-66     	; 0x646 <delay>
 688:	df 91       	pop	r29
 68a:	cf 91       	pop	r28
 68c:	1f 91       	pop	r17
 68e:	08 95       	ret

00000690 <ledLongTick>:
void ledLongTick(){
 690:	1f 93       	push	r17
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
	delay(300);
 696:	8c e2       	ldi	r24, 0x2C	; 44
 698:	91 e0       	ldi	r25, 0x01	; 1
 69a:	d5 df       	rcall	.-86     	; 0x646 <delay>
	PORTA.OUTSET = PIN2_bm;
 69c:	c0 e0       	ldi	r28, 0x00	; 0
 69e:	d6 e0       	ldi	r29, 0x06	; 6
 6a0:	14 e0       	ldi	r17, 0x04	; 4
 6a2:	1d 83       	std	Y+5, r17	; 0x05
	delay(600);
 6a4:	88 e5       	ldi	r24, 0x58	; 88
 6a6:	92 e0       	ldi	r25, 0x02	; 2
 6a8:	ce df       	rcall	.-100    	; 0x646 <delay>
	PORTA.OUTCLR = PIN2_bm;
	delay(300);
 6aa:	1e 83       	std	Y+6, r17	; 0x06
 6ac:	8c e2       	ldi	r24, 0x2C	; 44
 6ae:	91 e0       	ldi	r25, 0x01	; 1
}
 6b0:	ca df       	rcall	.-108    	; 0x646 <delay>
 6b2:	df 91       	pop	r29
 6b4:	cf 91       	pop	r28
 6b6:	1f 91       	pop	r17
 6b8:	08 95       	ret

000006ba <main>:
int main (void)
{
 6ba:	a9 df       	rcall	.-174    	; 0x60e <XtalInit>
 6bc:	84 ef       	ldi	r24, 0xF4	; 244
 6be:	91 e0       	ldi	r25, 0x01	; 1
 6c0:	c2 df       	rcall	.-124    	; 0x646 <delay>
 6c2:	cb df       	rcall	.-106    	; 0x65a <ledInit>
 6c4:	d0 df       	rcall	.-96     	; 0x666 <ledShortTick>
 6c6:	cf df       	rcall	.-98     	; 0x666 <ledShortTick>
 6c8:	ce df       	rcall	.-100    	; 0x666 <ledShortTick>
 6ca:	b4 dd       	rcall	.-1176   	; 0x234 <UsartInit>
 6cc:	33 de       	rcall	.-922    	; 0x334 <radioInit>
 6ce:	61 e1       	ldi	r22, 0x11	; 17
 6d0:	70 e0       	ldi	r23, 0x00	; 0
 6d2:	8d e5       	ldi	r24, 0x5D	; 93
 6d4:	90 e2       	ldi	r25, 0x20	; 32
 6d6:	d3 dd       	rcall	.-1114   	; 0x27e <Send>
 6d8:	80 e8       	ldi	r24, 0x80	; 128
 6da:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 6de:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 6e2:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <radioFrameReceiveBuffer>
 6e6:	90 91 0e 21 	lds	r25, 0x210E	; 0x80210e <radioFrameReceiveBuffer+0x1>
 6ea:	c2 de       	rcall	.-636    	; 0x470 <ReceiveFrameFromRadio>
 6ec:	8f e6       	ldi	r24, 0x6F	; 111
 6ee:	90 e2       	ldi	r25, 0x20	; 32
 6f0:	fc dd       	rcall	.-1032   	; 0x2ea <SendString>
 6f2:	83 df       	rcall	.-250    	; 0x5fa <SendRadioFrameToPc>
 6f4:	8e e7       	ldi	r24, 0x7E	; 126
 6f6:	90 e2       	ldi	r25, 0x20	; 32
 6f8:	f8 dd       	rcall	.-1040   	; 0x2ea <SendString>
 6fa:	ca df       	rcall	.-108    	; 0x690 <ledLongTick>
 6fc:	66 e1       	ldi	r22, 0x16	; 22
 6fe:	70 e0       	ldi	r23, 0x00	; 0
 700:	84 e8       	ldi	r24, 0x84	; 132
 702:	90 e2       	ldi	r25, 0x20	; 32
 704:	bc dd       	rcall	.-1160   	; 0x27e <Send>
 706:	40 e0       	ldi	r20, 0x00	; 0
 708:	50 e0       	ldi	r21, 0x00	; 0
 70a:	60 e0       	ldi	r22, 0x00	; 0
 70c:	8b e0       	ldi	r24, 0x0B	; 11
 70e:	61 de       	rcall	.-830    	; 0x3d2 <SendCommandToRadio>
 710:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <radioFrameReceiveBuffer>
 714:	90 91 0e 21 	lds	r25, 0x210E	; 0x80210e <radioFrameReceiveBuffer+0x1>
 718:	ab de       	rcall	.-682    	; 0x470 <ReceiveFrameFromRadio>
 71a:	8b e9       	ldi	r24, 0x9B	; 155
 71c:	90 e2       	ldi	r25, 0x20	; 32
 71e:	e5 dd       	rcall	.-1078   	; 0x2ea <SendString>
 720:	6c df       	rcall	.-296    	; 0x5fa <SendRadioFrameToPc>
 722:	8e e7       	ldi	r24, 0x7E	; 126
 724:	90 e2       	ldi	r25, 0x20	; 32
 726:	e1 dd       	rcall	.-1086   	; 0x2ea <SendString>
 728:	b3 df       	rcall	.-154    	; 0x690 <ledLongTick>
 72a:	e7 cf       	rjmp	.-50     	; 0x6fa <main+0x40>

0000072c <malloc>:
 72c:	0f 93       	push	r16
 72e:	1f 93       	push	r17
 730:	cf 93       	push	r28
 732:	df 93       	push	r29
 734:	82 30       	cpi	r24, 0x02	; 2
 736:	91 05       	cpc	r25, r1
 738:	10 f4       	brcc	.+4      	; 0x73e <malloc+0x12>
 73a:	82 e0       	ldi	r24, 0x02	; 2
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	e0 91 11 21 	lds	r30, 0x2111	; 0x802111 <__flp>
 742:	f0 91 12 21 	lds	r31, 0x2112	; 0x802112 <__flp+0x1>
 746:	20 e0       	ldi	r18, 0x00	; 0
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	a0 e0       	ldi	r26, 0x00	; 0
 74c:	b0 e0       	ldi	r27, 0x00	; 0
 74e:	30 97       	sbiw	r30, 0x00	; 0
 750:	19 f1       	breq	.+70     	; 0x798 <malloc+0x6c>
 752:	40 81       	ld	r20, Z
 754:	51 81       	ldd	r21, Z+1	; 0x01
 756:	02 81       	ldd	r16, Z+2	; 0x02
 758:	13 81       	ldd	r17, Z+3	; 0x03
 75a:	48 17       	cp	r20, r24
 75c:	59 07       	cpc	r21, r25
 75e:	c8 f0       	brcs	.+50     	; 0x792 <malloc+0x66>
 760:	84 17       	cp	r24, r20
 762:	95 07       	cpc	r25, r21
 764:	69 f4       	brne	.+26     	; 0x780 <malloc+0x54>
 766:	10 97       	sbiw	r26, 0x00	; 0
 768:	31 f0       	breq	.+12     	; 0x776 <malloc+0x4a>
 76a:	12 96       	adiw	r26, 0x02	; 2
 76c:	0c 93       	st	X, r16
 76e:	12 97       	sbiw	r26, 0x02	; 2
 770:	13 96       	adiw	r26, 0x03	; 3
 772:	1c 93       	st	X, r17
 774:	27 c0       	rjmp	.+78     	; 0x7c4 <malloc+0x98>
 776:	00 93 11 21 	sts	0x2111, r16	; 0x802111 <__flp>
 77a:	10 93 12 21 	sts	0x2112, r17	; 0x802112 <__flp+0x1>
 77e:	22 c0       	rjmp	.+68     	; 0x7c4 <malloc+0x98>
 780:	21 15       	cp	r18, r1
 782:	31 05       	cpc	r19, r1
 784:	19 f0       	breq	.+6      	; 0x78c <malloc+0x60>
 786:	42 17       	cp	r20, r18
 788:	53 07       	cpc	r21, r19
 78a:	18 f4       	brcc	.+6      	; 0x792 <malloc+0x66>
 78c:	9a 01       	movw	r18, r20
 78e:	bd 01       	movw	r22, r26
 790:	ef 01       	movw	r28, r30
 792:	df 01       	movw	r26, r30
 794:	f8 01       	movw	r30, r16
 796:	db cf       	rjmp	.-74     	; 0x74e <malloc+0x22>
 798:	21 15       	cp	r18, r1
 79a:	31 05       	cpc	r19, r1
 79c:	f9 f0       	breq	.+62     	; 0x7dc <malloc+0xb0>
 79e:	28 1b       	sub	r18, r24
 7a0:	39 0b       	sbc	r19, r25
 7a2:	24 30       	cpi	r18, 0x04	; 4
 7a4:	31 05       	cpc	r19, r1
 7a6:	80 f4       	brcc	.+32     	; 0x7c8 <malloc+0x9c>
 7a8:	8a 81       	ldd	r24, Y+2	; 0x02
 7aa:	9b 81       	ldd	r25, Y+3	; 0x03
 7ac:	61 15       	cp	r22, r1
 7ae:	71 05       	cpc	r23, r1
 7b0:	21 f0       	breq	.+8      	; 0x7ba <malloc+0x8e>
 7b2:	fb 01       	movw	r30, r22
 7b4:	82 83       	std	Z+2, r24	; 0x02
 7b6:	93 83       	std	Z+3, r25	; 0x03
 7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <malloc+0x96>
 7ba:	80 93 11 21 	sts	0x2111, r24	; 0x802111 <__flp>
 7be:	90 93 12 21 	sts	0x2112, r25	; 0x802112 <__flp+0x1>
 7c2:	fe 01       	movw	r30, r28
 7c4:	32 96       	adiw	r30, 0x02	; 2
 7c6:	44 c0       	rjmp	.+136    	; 0x850 <malloc+0x124>
 7c8:	fe 01       	movw	r30, r28
 7ca:	e2 0f       	add	r30, r18
 7cc:	f3 1f       	adc	r31, r19
 7ce:	81 93       	st	Z+, r24
 7d0:	91 93       	st	Z+, r25
 7d2:	22 50       	subi	r18, 0x02	; 2
 7d4:	31 09       	sbc	r19, r1
 7d6:	28 83       	st	Y, r18
 7d8:	39 83       	std	Y+1, r19	; 0x01
 7da:	3a c0       	rjmp	.+116    	; 0x850 <malloc+0x124>
 7dc:	20 91 0f 21 	lds	r18, 0x210F	; 0x80210f <__brkval>
 7e0:	30 91 10 21 	lds	r19, 0x2110	; 0x802110 <__brkval+0x1>
 7e4:	23 2b       	or	r18, r19
 7e6:	41 f4       	brne	.+16     	; 0x7f8 <malloc+0xcc>
 7e8:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
 7ec:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
 7f0:	20 93 0f 21 	sts	0x210F, r18	; 0x80210f <__brkval>
 7f4:	30 93 10 21 	sts	0x2110, r19	; 0x802110 <__brkval+0x1>
 7f8:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
 7fc:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
 800:	21 15       	cp	r18, r1
 802:	31 05       	cpc	r19, r1
 804:	41 f4       	brne	.+16     	; 0x816 <malloc+0xea>
 806:	2d b7       	in	r18, 0x3d	; 61
 808:	3e b7       	in	r19, 0x3e	; 62
 80a:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
 80e:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
 812:	24 1b       	sub	r18, r20
 814:	35 0b       	sbc	r19, r21
 816:	e0 91 0f 21 	lds	r30, 0x210F	; 0x80210f <__brkval>
 81a:	f0 91 10 21 	lds	r31, 0x2110	; 0x802110 <__brkval+0x1>
 81e:	e2 17       	cp	r30, r18
 820:	f3 07       	cpc	r31, r19
 822:	a0 f4       	brcc	.+40     	; 0x84c <malloc+0x120>
 824:	2e 1b       	sub	r18, r30
 826:	3f 0b       	sbc	r19, r31
 828:	28 17       	cp	r18, r24
 82a:	39 07       	cpc	r19, r25
 82c:	78 f0       	brcs	.+30     	; 0x84c <malloc+0x120>
 82e:	ac 01       	movw	r20, r24
 830:	4e 5f       	subi	r20, 0xFE	; 254
 832:	5f 4f       	sbci	r21, 0xFF	; 255
 834:	24 17       	cp	r18, r20
 836:	35 07       	cpc	r19, r21
 838:	48 f0       	brcs	.+18     	; 0x84c <malloc+0x120>
 83a:	4e 0f       	add	r20, r30
 83c:	5f 1f       	adc	r21, r31
 83e:	40 93 0f 21 	sts	0x210F, r20	; 0x80210f <__brkval>
 842:	50 93 10 21 	sts	0x2110, r21	; 0x802110 <__brkval+0x1>
 846:	81 93       	st	Z+, r24
 848:	91 93       	st	Z+, r25
 84a:	02 c0       	rjmp	.+4      	; 0x850 <malloc+0x124>
 84c:	e0 e0       	ldi	r30, 0x00	; 0
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	cf 01       	movw	r24, r30
 852:	df 91       	pop	r29
 854:	cf 91       	pop	r28
 856:	1f 91       	pop	r17
 858:	0f 91       	pop	r16
 85a:	08 95       	ret

0000085c <free>:
 85c:	cf 93       	push	r28
 85e:	df 93       	push	r29
 860:	00 97       	sbiw	r24, 0x00	; 0
 862:	09 f4       	brne	.+2      	; 0x866 <free+0xa>
 864:	81 c0       	rjmp	.+258    	; 0x968 <free+0x10c>
 866:	fc 01       	movw	r30, r24
 868:	32 97       	sbiw	r30, 0x02	; 2
 86a:	12 82       	std	Z+2, r1	; 0x02
 86c:	13 82       	std	Z+3, r1	; 0x03
 86e:	a0 91 11 21 	lds	r26, 0x2111	; 0x802111 <__flp>
 872:	b0 91 12 21 	lds	r27, 0x2112	; 0x802112 <__flp+0x1>
 876:	10 97       	sbiw	r26, 0x00	; 0
 878:	81 f4       	brne	.+32     	; 0x89a <free+0x3e>
 87a:	20 81       	ld	r18, Z
 87c:	31 81       	ldd	r19, Z+1	; 0x01
 87e:	82 0f       	add	r24, r18
 880:	93 1f       	adc	r25, r19
 882:	20 91 0f 21 	lds	r18, 0x210F	; 0x80210f <__brkval>
 886:	30 91 10 21 	lds	r19, 0x2110	; 0x802110 <__brkval+0x1>
 88a:	28 17       	cp	r18, r24
 88c:	39 07       	cpc	r19, r25
 88e:	51 f5       	brne	.+84     	; 0x8e4 <free+0x88>
 890:	e0 93 0f 21 	sts	0x210F, r30	; 0x80210f <__brkval>
 894:	f0 93 10 21 	sts	0x2110, r31	; 0x802110 <__brkval+0x1>
 898:	67 c0       	rjmp	.+206    	; 0x968 <free+0x10c>
 89a:	ed 01       	movw	r28, r26
 89c:	20 e0       	ldi	r18, 0x00	; 0
 89e:	30 e0       	ldi	r19, 0x00	; 0
 8a0:	ce 17       	cp	r28, r30
 8a2:	df 07       	cpc	r29, r31
 8a4:	40 f4       	brcc	.+16     	; 0x8b6 <free+0x5a>
 8a6:	4a 81       	ldd	r20, Y+2	; 0x02
 8a8:	5b 81       	ldd	r21, Y+3	; 0x03
 8aa:	9e 01       	movw	r18, r28
 8ac:	41 15       	cp	r20, r1
 8ae:	51 05       	cpc	r21, r1
 8b0:	f1 f0       	breq	.+60     	; 0x8ee <free+0x92>
 8b2:	ea 01       	movw	r28, r20
 8b4:	f5 cf       	rjmp	.-22     	; 0x8a0 <free+0x44>
 8b6:	c2 83       	std	Z+2, r28	; 0x02
 8b8:	d3 83       	std	Z+3, r29	; 0x03
 8ba:	40 81       	ld	r20, Z
 8bc:	51 81       	ldd	r21, Z+1	; 0x01
 8be:	84 0f       	add	r24, r20
 8c0:	95 1f       	adc	r25, r21
 8c2:	c8 17       	cp	r28, r24
 8c4:	d9 07       	cpc	r29, r25
 8c6:	59 f4       	brne	.+22     	; 0x8de <free+0x82>
 8c8:	88 81       	ld	r24, Y
 8ca:	99 81       	ldd	r25, Y+1	; 0x01
 8cc:	84 0f       	add	r24, r20
 8ce:	95 1f       	adc	r25, r21
 8d0:	02 96       	adiw	r24, 0x02	; 2
 8d2:	80 83       	st	Z, r24
 8d4:	91 83       	std	Z+1, r25	; 0x01
 8d6:	8a 81       	ldd	r24, Y+2	; 0x02
 8d8:	9b 81       	ldd	r25, Y+3	; 0x03
 8da:	82 83       	std	Z+2, r24	; 0x02
 8dc:	93 83       	std	Z+3, r25	; 0x03
 8de:	21 15       	cp	r18, r1
 8e0:	31 05       	cpc	r19, r1
 8e2:	29 f4       	brne	.+10     	; 0x8ee <free+0x92>
 8e4:	e0 93 11 21 	sts	0x2111, r30	; 0x802111 <__flp>
 8e8:	f0 93 12 21 	sts	0x2112, r31	; 0x802112 <__flp+0x1>
 8ec:	3d c0       	rjmp	.+122    	; 0x968 <free+0x10c>
 8ee:	e9 01       	movw	r28, r18
 8f0:	ea 83       	std	Y+2, r30	; 0x02
 8f2:	fb 83       	std	Y+3, r31	; 0x03
 8f4:	49 91       	ld	r20, Y+
 8f6:	59 91       	ld	r21, Y+
 8f8:	c4 0f       	add	r28, r20
 8fa:	d5 1f       	adc	r29, r21
 8fc:	ec 17       	cp	r30, r28
 8fe:	fd 07       	cpc	r31, r29
 900:	61 f4       	brne	.+24     	; 0x91a <free+0xbe>
 902:	80 81       	ld	r24, Z
 904:	91 81       	ldd	r25, Z+1	; 0x01
 906:	84 0f       	add	r24, r20
 908:	95 1f       	adc	r25, r21
 90a:	02 96       	adiw	r24, 0x02	; 2
 90c:	e9 01       	movw	r28, r18
 90e:	88 83       	st	Y, r24
 910:	99 83       	std	Y+1, r25	; 0x01
 912:	82 81       	ldd	r24, Z+2	; 0x02
 914:	93 81       	ldd	r25, Z+3	; 0x03
 916:	8a 83       	std	Y+2, r24	; 0x02
 918:	9b 83       	std	Y+3, r25	; 0x03
 91a:	e0 e0       	ldi	r30, 0x00	; 0
 91c:	f0 e0       	ldi	r31, 0x00	; 0
 91e:	12 96       	adiw	r26, 0x02	; 2
 920:	8d 91       	ld	r24, X+
 922:	9c 91       	ld	r25, X
 924:	13 97       	sbiw	r26, 0x03	; 3
 926:	00 97       	sbiw	r24, 0x00	; 0
 928:	19 f0       	breq	.+6      	; 0x930 <free+0xd4>
 92a:	fd 01       	movw	r30, r26
 92c:	dc 01       	movw	r26, r24
 92e:	f7 cf       	rjmp	.-18     	; 0x91e <free+0xc2>
 930:	8d 91       	ld	r24, X+
 932:	9c 91       	ld	r25, X
 934:	11 97       	sbiw	r26, 0x01	; 1
 936:	9d 01       	movw	r18, r26
 938:	2e 5f       	subi	r18, 0xFE	; 254
 93a:	3f 4f       	sbci	r19, 0xFF	; 255
 93c:	82 0f       	add	r24, r18
 93e:	93 1f       	adc	r25, r19
 940:	20 91 0f 21 	lds	r18, 0x210F	; 0x80210f <__brkval>
 944:	30 91 10 21 	lds	r19, 0x2110	; 0x802110 <__brkval+0x1>
 948:	28 17       	cp	r18, r24
 94a:	39 07       	cpc	r19, r25
 94c:	69 f4       	brne	.+26     	; 0x968 <free+0x10c>
 94e:	30 97       	sbiw	r30, 0x00	; 0
 950:	29 f4       	brne	.+10     	; 0x95c <free+0x100>
 952:	10 92 11 21 	sts	0x2111, r1	; 0x802111 <__flp>
 956:	10 92 12 21 	sts	0x2112, r1	; 0x802112 <__flp+0x1>
 95a:	02 c0       	rjmp	.+4      	; 0x960 <free+0x104>
 95c:	12 82       	std	Z+2, r1	; 0x02
 95e:	13 82       	std	Z+3, r1	; 0x03
 960:	a0 93 0f 21 	sts	0x210F, r26	; 0x80210f <__brkval>
 964:	b0 93 10 21 	sts	0x2110, r27	; 0x802110 <__brkval+0x1>
 968:	df 91       	pop	r29
 96a:	cf 91       	pop	r28
 96c:	08 95       	ret

0000096e <_exit>:
 96e:	f8 94       	cli

00000970 <__stop_program>:
 970:	ff cf       	rjmp	.-2      	; 0x970 <__stop_program>
